openapi: "3.0.3"
info:
  title: PlayBingo API
  version: "1.0"
servers:
  - url: https://playbingo.gg/api
tags:
  - name: rooms
    description: Creating, updating, and interacting with rooms
  - name: games
    description: Creating and managing games
components:
  securitySchemes:
    cookieAuthentication:
      description:
        Authentication is handled via session and cookies. Endpoints
        protected by this authentication method are only available to requests
        made by the website, unless they list another form of authorization.
      type: apiKey
      in: cookie
      name: connect.sid
  responses:
    errorBadRequest:
      description:
        "Bad Request: Required parameters, request body, or body contents are
        missing, malformed, or otherwise invalid, and the client should have
        been able to validate them as such."
    errorUnauthorized:
      description:
        "Unauthorized: The request failed to provide identification in a way the API
        server recognizes."
    errorForbidden:
      description:
        "Forbidden: The provided authorization does not have permission to
        perform the requested action"
    errorNotFound:
      description:
        "Not Found: The requested resource was not found"
    errorServer:
      description:
        "Internal Server Error: The server encountered an error unrelated to the
        contents of the request"
  schemas:
    user:
      type: object
      properties:
        id:
          type: string
          description:
            The user's database UUID
        username:
          type: string
          description:
            The user's name. Usernames are unique across all
            PlayBingo users
        racetimeConnected:
          type: boolean
          description:
            Flag indicating if the user has connected their account to
            racetime.gg in order to use the integration
    roomData:
      type: object
      required:
        - name
        - game
        - slug
        - gameSlug
      properties:
        name:
          type: string
          description: The user given name of the room
        game:
          type: string
          description: The name of the game the room belongs to
        slug:
          type: string
          description:
            The unique identifier for th room, generated by the system
        gameSlug:
          type: string
          description:
            The unique identifier of the game, used to retrieve game resources
            from the server
        roomRacetimeConnection:
          $ref: "#/components/schemas/roomRacetimeConnection"
    roomRacetimeConnection:
      type: object
      required:
        - gameActive
      properties:
        gameActive:
          type: boolean
          description:
            Whether or not the game is enabled for racetime.gg integration and
            properly configured
        url:
          type: string
          description:
            Full url to the connected racetime room. If not set, the room is not
            connected to a racetime room
        websocketConnected:
          type: boolean
          description: 
            True if there is an active websocket connection to the room
        status:
          type: string
          description: Racetime room status
        startDelay:
          type: string
          description: 
            ISO 8601 duration string representing the amount of time between
            ready and start
        started:
          type: string
          description: ISO 8601 date when the race started
        ended:
          type: string
          description: ISO 8601 date when the race ended
    roomSocketAuthToken:
      type: string
      description:
        JWT representing authorization to access a specific room. Room
        authorization tokens encapsulate both the authorized user's identity
        within the room, as well as what permissions they have within the room.
    game:
      type: object
      description: Represents the high level information for a single bingo game
      required:
        - name
        - slug
        - owners
        - moderators
        - racetimeBeta
      properties:
        name:
          type: string
          description: The full name of the game
        slug:
          type: string
          description: The game's unique, short name used for URLs
        coverImage:
          type: string
          description:
            URL to the game's cover image displayed on the website. May link
            externally
        owners:
          type: array
          description: The owners of the game
          items:
            $ref: "#/components/schemas/user"
        moderators:
          type: array
          description: The moderators of the game
          items:
            $ref: "#/components/schemas/user"
        enableSRLv5:
          type: boolean
          description: If the game is enabled for SRLv5 board generation
        racetimeBeta:
          type: boolean
          description:
            \[TEMPORARY\] Flag indicating if the game has opted in to the
            racetime.gg integration beta program
        racetimeCategory:
          type: string
          description: The slug of the connected racetime category
        racetimeGoal:
          type: string
          description: The name of the connected racetime goal
    goal:
      type: object
      description:
        Represents a single goal for a game.
      properties:
        id:
          type: string
          description: The goal's unique internal identifier
        goal:
          type: string
          description:
            The goals primary text. Typically a short blurb stating the object
            of the goal
        description:
          type: string
          description:
            Long form description of the goal. Usually used to explain
            additional, detailed information about the task and how to
            accomplish it
        difficultly:
          type: number
          description:
            Difficulty rating of the goal. Meaning depends on the generator the
            goal was designed for. For SRLv5, this is a number 1-25
        categories:
          type: array
          items:
            type: string
          description:
            List of category types that the goal belongs to. Used by generators
            to prevent overly-synergistic lines
paths:
  /me:
    get:
      summary: Get the currently logged in user
      security:
        - cookieAuthentication: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        401:
          $ref: "#/components/responses/errorUnauthorized"
        403:
          $ref: "#/components/responses/errorForbidden"
  /logout:
    post:
      summary: End the current login session
      description:
        Ends the login session of the currently logged in user.
      responses:
        200:
          description: OK
        401:
          $ref: "#/components/responses/errorUnauthorized"
  /rooms:
    get:
      summary: Get a list of rooms
      description:
        Gets the list of rooms known to the server. By default, only
        active rooms are returned.
      tags: 
        - rooms
      parameters:
        - name: inactive
          in: query
          description: Optional - include inactive rooms in the returned list
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/roomData"
    post:
      summary: Create a new room
      description:
        Creates a new room, initializes it, generates a board, and authorizes
        the creator for access to the room. Returns the room's unique identifier
        and the creators authorization token which can be immediately used in a
        websocket connection.
      tags:
        - rooms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - game
                - nickname
                - password
              properties:
                name:
                  type: string
                  description: The name of the room
                game:
                  type: string
                  description: The slug of the game
                nickname:
                  type: string
                  description: The creator of the room's desired nickname
                password:
                  type: string
                  description: The room password
                generationMode:
                  type: string
                  description:
                    The board generation mode of the room. If not specified, the
                    default value depends on the games configuration. If it is
                    configured for SRLv5, generation will default to SRLv5.
                    Otherwise, the default generation mode is Random
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  slug:
                    type: string
                    description:
                      Unique identifier for the room, which can be used to
                      construct the URL to the room
                  authToken:
                    $ref: "#/components/schemas/roomSocketAuthToken"
                  
        400:
          $ref: "#/components/responses/errorBadRequest"
        404:
          $ref: "#/components/responses/errorNotFound"
  /rooms/{slug}:
    get:
      tags:
      - rooms
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      summary: Get data for a room
      description:
        Gets the room data for the specified room. This will cause the server
        to flag an inactive room as active, unless the room is closed.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/roomData"
        404:
          $ref: "#/components/responses/errorNotFound"
  /rooms/{slug}/authorize:
    post:
      tags:
      - rooms
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      summary: Get an authorization token for a room
      description:
        Creates an authorization session with the websocket server for the
        specified room.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description:
                    The room password. Required for rooms that are password
                    protected, unless the logged in user has special
                    authorization for the game.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  authToken:
                    $ref: "#/components/schemas/roomSocketAuthToken"
        403:
          $ref: "#/components/responses/errorForbidden"
        404:
          $ref: "#/components/responses/errorNotFound"
  /games:
    get:
      summary: Get all games
      description: Gets the full list of games.
      tags:
      - games
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/game"
    post:
      summary: Create a new game
      description:
        Creates a new game from the specified data. Requires a login session,
        and can only be called from the website. The user in the login session
        will be made the owner of the game.
      tags:
        - games
      security:
        - cookieAuthentication: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - slug
              properties:
                name:
                  type: string
                  description: The name of the new game
                slug:
                  type: string
                  description: The slug of the new game
                coverImage:
                  type: string
                  description: Link to the cover image of the new game
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/game"
        400:
          $ref: "#/components/responses/errorBadRequest"
        401:
          $ref: "#/components/responses/errorUnauthorized"
        500:
          $ref: "#/components/responses/errorServer"
  /games/{slug}:
    get:
      summary: Get a single game
      description: Gets data for a single game
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          description: The slug of the desired game
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/game"
        404:
          $ref: "#/components/responses/errorNotFound"
    post:
      summary: Update a game
      description:
        Update the data for an existing game
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          description: The slug of the desired game
          schema:
            type: string
      security:
        - cookieAuthentication: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/game"
        400:
          $ref: "#/components/responses/errorBadRequest"
  /games/{slug}/goals:
    get:
      summary: Get goals for a game
      description:
        Get the list of all goals for a game
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          description: The slug of the desired game
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/goal"
    post:
      summary: Create a new goal
      description:
        Creates a new goal belonging to the specified game
      tags:
        - games
      parameters:
        - name: slug
          in: path
          required: true
          description: The slug of the desired game
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/goal"
        400:
          $ref: "#/components/responses/errorBadRequest"


      
                  
